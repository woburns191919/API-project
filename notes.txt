make sure country is showing on details page


colorZilla


full crud: spots
crd: reviews





<h3>{spotArr[12]}</h3>
        <p>{spotArr[9]}, {spotArr[10]}, {spotArr[11]}</p>
        <div className="details-big-photo-container">
          {/* I am in spot page now { hasUserFinishedReservationWithinLastTenDays && < reviewComponent /> } */}
          <div className="preview-image-container">
            <Link key={spotId} to={`/spots/${spotId}`}>
              <img className="preview-image" src={`${spots.previewImage}`} />
            </Link>
          </div>
          <div className="small-images-container">
            {spotArr.map((spotObj, i) => (
              i < 4 &&
              <div key={i} className="other-images">
                <Link to={`/spots/${spotId}`}>
                  <img className="try-image" src={`${spotObj.url}`} />
                </Link>
              </div>
            ))}
          </div>

convert it to a date obj through date api. then pass in created at string into date obj
getmonth method  (returns integer) on created At. build array in front end.




!loggedInUser.id &&


{reviewsArr.filter(reviewsObj => reviewsObj.userId === loggedInUser.id).length}





pet rating ---- use for reviews



get reviews, already did in spots







notes for edit spots:


import { thunkPutEditSpot} from "../../store/spots";
// import { useHistory, useParams } from "react-router-dom";
// import { useDispatch, useSelector } from "react-redux";
// import { useState, useEffect } from "react";

// const SpotEdit = () => {
//   console.log('rendering spot edit')
//   const history = useHistory();
//   const user = useSelector((state) => state.session.user);
//   const dispatch = useDispatch();
//   const { spotId } = useParams();

//   const [country, setCountry] = useState("");
//   const [address, setAddress] = useState("");
//   const [city, setCity] = useState("");
//   const [state, setState] = useState("");
//   const [lat, setLat] = useState("");
//   const [lng, setLng] = useState("");
//   const [description, setDescription] = useState("");
//   const [title, setTitle] = useState("");
//   const [price, setPrice] = useState("");
//   const [name, setName] = useState("");

//   console.log('current user', user)

//   if (!user) {
//     alert("You must be logged in to edit a spot!");
//     history.push("/");
//   }


//     useEffect(() => {
//       dispatch(thunkPutEditSpot(spotId))
//     }, [dispatch])

//     const foundSpot = useSelector((state) =>
//     console.log("state from edit get", state)
//   );



//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!foundSpot) return null;
//     const editedSpot = await dispatch(thunkPutEditSpot(payload, spotId));
//     history.push(`/spots/${editedSpot.id}`);

//     const payload = {
//       address,
//       city,
//       state,
//       country,
//       lat,
//       lng,
//       name,
//       description,
//       price,
//     };


//   };

//   return (
//     <main className="form-wrapper">
//       <form className="spot-form" onSubmit={handleSubmit}>
//         <h4>Create a new Spot</h4>
//         <label>
//           Country <br></br>
//           <input
//             type="text"
//             required="true"
//             // name="country"
//             value={country}
//             onChange={(e) => setCountry(e.target.value)}
//           />
//         </label>
//         <div>
//           <label>
//             Street Address <br></br>
//             <input
//               type="text"
//               required="true"
//               name="address"
//               value={address}
//               onChange={(e) => setAddress(e.target.value)}
//             ></input>
//           </label>
//         </div>
//         <div>
//           <label>
//             City <br></br>
//             <input
//               required="true"
//               type="text"
//               name="city"
//               value={city}
//               onChange={(e) => setCity(e.target.value)}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             State <br></br>
//             <input
//               required="true"
//               type="text"
//               name="state"
//               value={state}
//               onChange={(e) => setState(e.target.value)}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             Latitude <br></br>
//             <input
//               required="true"
//               type="text"
//               name="latitude"
//               value={lat}
//               onChange={(e) => setLat(e.target.value)}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             Longitude <br></br>
//             <input
//               required="true"
//               type="text"
//               name="longitude"
//               value={lng}
//               onChange={(e) => setLng(e.target.value)}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             Name <br></br>
//             <input
//               type="text"
//               name="name"
//               value={name}
//               onChange={(e) => setName(e.target.value)}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             Describe your place to guests <br></br>
//             <input
//               required="true"
//               minLength="30"
//               type="textarea"
//               value={description}
//               name="description"
//               onChange={(e) => {
//                 setDescription(e.target.value);
//               }}
//             />
//           </label>
//         </div>

//         <div>
//           <label>
//             Create a title for your spot <br></br>
//             <input
//               required="true"
//               type="text"
//               value={title}
//               name="title"
//               onChange={(e) => {
//                 setTitle(e.target.value);
//               }}
//             />
//           </label>
//         </div>
//         <div>
//           <label>
//             Set a base price for your spot <br></br>
//             <input
//               required="true"
//               type="number"
//               name="base price"
//               value={price}
//               onChange={(e) => {
//                 setPrice(e.target.value);
//               }}
//             ></input>
//           </label>
//         </div>
//       </form>
//     </main>
//   );
// };

// export default SpotEdit;





random 404 that just pops up? at logout



random for each type error on refreshing




view ratings and reviews
-----

If the review count is zero (there are no reviews yet for this spot), it should not show the centered dot or the review count (only the average star rating should be displayed)

issue with preview image mixup

decimal thing

first post review order

fix year issue with review

--------


-------
landing page

tooltip

-----
CREATE Spot
$ and city state length 
